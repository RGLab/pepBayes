% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/AllMethods.R
\docType{methods}
\name{pepBayesMcmc}
\alias{pepBayesMcmc}
\alias{pepBayesMcmc,pepBayesFit-method}
\alias{pepBayesMcmc,peptideSet-method}
\title{MCMC sampling for pepBayes models.}
\usage{
pepBayesMcmc(x, ...)

\S4method{pepBayesMcmc}{peptideSet}(x, position_data = NULL,
  control_id = NULL, n_samples, n_thin, n_burn, n_threads = detectCores(),
  prior_control_list = NULL, chain_control_list = NULL)

\S4method{pepBayesMcmc}{pepBayesFit}(x, n_samples, n_thin, n_burn = 0,
  n_threads = detectCores(), join_output = TRUE)
}
\arguments{
\item{x}{A pepBayesFit or peptideSet object containing experiment data.}

\item{...}{Additional arguments for sampling control. See methods.}

\item{position_data}{A data.frame or GRanges object with peptide position
information.}

\item{control_id}{Character, indicating which slides are control
slides from the "visit" column of the phenoData slot of the peptideSet argument.}

\item{n_samples}{Number of MCMC posterior samples to collect.}

\item{n_thin}{Number of MCMC iterations between posterior samples.}

\item{n_burn}{Number of MCMC iterations to perform before sampling begins.}

\item{n_threads}{Number of parallel threads to use during sampling.}

\item{prior_control_list}{A named list of parameter values to initialize}

\item{chain_control_list}{A named list of parameters controlling
which parameters to update or fix.}

\item{join_output}{A boolean. Should input be merged with output?}
}
\value{
An object of type \link{pepBayesFit} containing sorted slide metadata,
 Markov chain posterior samples, posterior probabilities of binding, and
 chain information.
}
\description{
Sample the posterior distribution of pepBayes models. The generic
function has methods for \link{peptideSet} objects and for \link{pepBayesFit}
objects for restarting a Markov chain from its last position.
}
\details{
PepBayes estimates the posterior probability of
a differential antibody response against each peptide in a peptide microarray
assay, for each subject, when compared with control samples. Two common experimental
designs are automatically
detected. In an unpaired design, differences between a population of interest and
a control population are detected. A paired design has matched samples for each subject
before and after a treatment is applied. The function \code{pepBayesMcmc}
automatically detects the experimental design from the data, and
runs MCMC to sample the posterior distribution of the appropriate pepBayes model.

When \code{x} is a \code{peptideSet} object, the paired or unpaired model is
chosen depending on the 'ptid' column of \code{pData(x)}. Paired data is detected
when each unique value of 'ptid' appears exactly twice among all slides.

The \code{position_data} argument supplies information about peptide position
information. This argument may be a 'data.frame' with columns 'start',
'end' or 'width', and 'peptide'. If a 'GRanges' object, then it must have either peptide
as a name or have peptide as a metadata column. If omitted (\code{position_data = NULL}),
response probability hyperparamters will be fixed during estimation.

When \code{x} is a pepBayesFit object, the chain is started from the most
recent parameter values in the fitted object. In the event that \code{x} is
the output of a previous MCMC fit, the argument \code{join_output} becomes
relevant. If \code{TRUE}, parameter traces are appended to those in \code{x}
and the posterior probabilities of binding are averaged together based on
the number of iterations in the fitted object and the current chain.
}
\seealso{
\code{\link{pepBayesFit}}
\code{\link{pepBayesFit-methods}}
\code{\link{peptideSet}}
\code{\link{pepBayesEcm}}
\code{\link{pepBayesCalls}}
}

